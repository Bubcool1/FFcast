#!/bin/bash

# To register a sub-command 'foo', you MUST add this,
#
#     sub_commands['foo']='description'
#
# By default, running sub-command 'foo' will execute the function 'foo'.
# But you MAY explicitly associate sub-command 'foo' with function 'bar',
#
#     sub_cmdfuncs['foo']=bar
#
# This is useful in the cases when your sub-command isn't a valid function
# name, or when it conflicts with an existing function.
#
# A sub-command function SHOULD in most cases set the cmdline array, which
# holds the final command line to be executed by ffcast,
#
#     bar() {
#         cmdline=(ffmpeg ...)
#     }
#
# As this file is sourced after all the geometry processing has been done, you
# have access to, among others, the variables $w $h $_x $_y $x_ $y_ and all the
# functions defined in ffcast.
#
# The positional arguments to a sub-command function are all the arguments
# after the sub-command as specified on the command line by the user.

sub_commands['help']='print help for a sub-command'
sub_cmdfuncs['help']=subcmd_help
subcmd_help() {
    local sub_cmd=$1
    if ! (( $# )); then
        list_sub_commands
        return
    fi
    if [[ -v sub_commands[$sub_cmd] ]]; then
        local sub_cmd_func=${sub_cmdfuncs[$sub_cmd]:-$sub_cmd}
        printf '%s: %s\n' "$sub_cmd" "${sub_commands[$sub_cmd]}"
        if [[ $(type -t "$sub_cmd_func") == function ]]; then
            declare -fp "$sub_cmd_func"
            return
        else
            error "sub-command '%s' function '%s' not found" "$sub_cmd" \
                "$sub_cmd_func"
        fi
    else
        error "no such sub-command '%s'" "$sub_cmd"
    fi
    exit 1
}

sub_commands['png']='take a screenshot and save it as a PNG image'
png() {
    local outfile=${1:-screenshot-${w}x$h.png}
    msg 'saving to file: %s' "$outfile"
    cmdline=(ffmpeg -loglevel quiet -f x11grab -show_region 1
        -video_size "${w}x$h" -i "$DISPLAY+$_x,$_y" -frames:v 1
        -codec:v png -f image2 "$outfile")
}

sub_commands['%']='bypass predefined sub-commands, to avoid name conflicts'
sub_cmdfuncs['%']=nop
nop() {
    cmdline=("$@")
}

# vim:ts=4:sw=4:et:cc=80:
